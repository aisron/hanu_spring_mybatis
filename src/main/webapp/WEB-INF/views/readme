라이브러리 주소
https://mvnrepository.com/
spring-jdbc 또는 mysql 등등 라이버리리
아이콘 모양에 따라 부트용 스프링용 다름

mybatis 검색
	mybatis 와 MyBatis Spring 받기
		버전 mybatis 3.2.8
		버전 MyBatis Spring 1.2.2

		<!-- Mybatis 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis</artifactId>
		    <version>3.2.8</version>
		</dependency>
		
		
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.2.2</version>
		</dependency>
	




새 프로젝트
 프로젝트이름 작성 - mvc
   패키지 - com.jbedu.mybtis

   
   servlet-context.xml
    	beans:bean 작성
    		<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
				<beans:property name="driverClassName" value="com.mysql.jdbc.Driver"></beans:property>
				<beans:property name="url" value="jdbc:mysql://localhost:3306/jsp_project"></beans:property>
				<beans:property name="username" value="root"></beans:property>
				<beans:property name="password" value="12345"></beans:property>
			</beans:bean>
			
	web.xml
		<!-- 한글 처리 -->
		<filter>
			<filter-name>encodingFilter</filter-name>
			<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>	
		
			<init-param>
				<param-name>encoding</param-name>
				<param-value>UTF-8</param-value>
			</init-param>
		</filter>
		<filter-mapping>
			<filter-name>encodingFilter</filter-name>
			<url-pattern>/*</url-pattern>
		</filter-mapping>		
			
	pom.xml 
		</dependencies> 바로 위에 작성
			<!-- JDBC 라이브러리  -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-jdbc</artifactId>
				<version>4.1.4.RELEASE</version>
			</dependency>
			
			<!-- MySQL JDBC 라이브러리 -->
			<dependency>
				<groupId>mysql</groupId>
				<artifactId>mysql-connector-java</artifactId>
				<version>8.0.31</version>
			</dependency>
			
			
		servlet-context.xml
						  
		   // classpath 는 경로지정			
		   // <beans:property 는 멤버변수
		
				<!-- 	mybatis 사용시 필수 요소 -->	
				<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
					<beans:property name="driverClassName" value="com.mysql.jdbc.Driver"></beans:property>
					<beans:property name="url" value="jdbc:mysql://localhost:3306/jsp_project"></beans:property>
					<beans:property name="username" value="root"></beans:property>
					<beans:property name="password" value="12345"></beans:property>
				</beans:bean>
				
				<beans:bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
					<beans:property name="dataSource" ref="dataSource"></beans:property>
					<beans:property name="mapperLocations" value="classpath:com/jbedu/mybatis/mapper/*.xml"></beans:property>
					<!-- 밸류는 패키지 위치 <beans:property name="mapperLocations" value="classpath:com/jbedu/mybatis/mapper/*.xml"></beans:property> -->
				</beans:bean>  		
					
				<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
					<beans:constructor-arg index="0" ref="sqlSessionFactory"></beans:constructor-arg>
				</beans:bean>	     
				<!-- /mybatis 사용시 필수 요소 -->	
		
package 만들기 ------------------------------
	com.jbedu.mybatis
		> mapper, dao, dto, controller 만들기 
		
----------------------------------------------
dao, mapper에 같은 이름으로 확장자만 다르게 만들기
			
			dao에 interface로 BoardDao 만들기
			mapper에 BoardMapper.xml 만들기
				BoardMapper.xml에 선언하기
					<!DOCTYPE mapper
					    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
					    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


controller패키지에 BoardController클래스 만듬
	@Autowired
	private SqlSession sqlSessoin; //의존성 자동주입 > DI
	
	@Controller
	public class BoardController {
		@RequestMapping(value ="write_form")
		public String write_form() {
			return "write_form";
		}
		
}



BaordDao 
	글쓰기 넘길 dao
		public void boardWriteDao(String bname, String btitle, String bcontent); // 글쓰기
	
	
	
controller에서
	폼에서 받은 writeOK 작성
		@RequestMapping(value="/writeOK")
		public String boardWrite(HttpServletRequest request, Model model) {	
			String bname = request.getParameter("bname");
			String btitle = request.getParameter("btitle");
			String bcontent = request.getParameter("bcontent");
			
			// BoardDao 뽑아야 하는데 인터페이스라서 new 생성자 안됨 그래서 sqlSessoin에서 봅아온다.
			BoardDao baordDao = sqlSessoin.getMapper(BoardDao.class);
			baordDao.boardWriteDao(bname, btitle, bcontent);
					
					
			return "redirect:boardList";//
		}


	
BoardMapper.xml  ---

	<!-- 짝의 이름을 적어준다.패키지까지  짝궁은 한놈만 된다-->
	<!-- 짝의이름 BoardDao 패키지 com.jbedu.mybatis.dao.  -->
	<mapper namespace="com.jbedu.mybatis.dao.BoardDao">
		<!-- 여기도 짝의 이름 -->
		<insert id="boardWriteDao">
															<!-- 		? 대신에 	#{param1} 순번대로 bhit는 입력 받는게 아님 -->
				INSERT INTO mvc_board(bname, btitle, bcontent, bhit) VALUES (#{param1},#{param2},#{param3},0)
		</insert>
	</mapper>
	
글목록 ---------
BoardController
 @RequestMapping(value="/boardlist")
	public String boardList(HttpServletRequest request, Model model) {	
			
		// BoardDao 뽑아야 하는데 인터페이스라서 new 생성자 안됨 그래서 sqlSessoin에서 봅아온다.
		BoardDao baordDao = sqlSessoin.getMapper(BoardDao.class);
		
		
		return "boardList"; // 단순 경로 지정
	}
	
	
	
글삭제 -----
dao
	public void boardDeleteDao(String bnum); //글삭제

	
mapper
	<select id="boardDeleteDao" >
		DELETE FROM mvc_board WHERE bnum = #{parma1}
	</select>

controller
	